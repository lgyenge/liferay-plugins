/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package dinet.orgsetup62.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import dinet.orgsetup62.model.Product;
import dinet.orgsetup62.model.ProductModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Product service. Represents a row in the &quot;orgsetup_Product&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link dinet.orgsetup62.model.ProductModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProductImpl}.
 * </p>
 *
 * @author gyengelaszlo
 * @see ProductImpl
 * @see dinet.orgsetup62.model.Product
 * @see dinet.orgsetup62.model.ProductModel
 * @generated
 */
public class ProductModelImpl extends BaseModelImpl<Product>
	implements ProductModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a product model instance should use the {@link dinet.orgsetup62.model.Product} interface instead.
	 */
	public static final String TABLE_NAME = "orgsetup_Product";
	public static final Object[][] TABLE_COLUMNS = {
			{ "azon", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "services", Types.VARCHAR },
			{ "image", Types.VARCHAR },
			{ "datasheet", Types.VARCHAR },
			{ "distributor", Types.VARCHAR },
			{ "category", Types.VARCHAR },
			{ "subcategory", Types.VARCHAR },
			{ "pageURL", Types.VARCHAR },
			{ "pagetitle", Types.VARCHAR },
			{ "startingpage", Types.VARCHAR },
			{ "date_", Types.TIMESTAMP },
			{ "liferayOrgId", Types.BIGINT },
			{ "pageURLAzon", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table orgsetup_Product (azon LONG not null primary key,name VARCHAR(75) null,description STRING null,services VARCHAR(256) null,image VARCHAR(256) null,datasheet VARCHAR(75) null,distributor VARCHAR(75) null,category VARCHAR(256) null,subcategory VARCHAR(256) null,pageURL VARCHAR(256) null,pagetitle VARCHAR(256) null,startingpage VARCHAR(256) null,date_ DATE null,liferayOrgId LONG,pageURLAzon VARCHAR(256) null)";
	public static final String TABLE_SQL_DROP = "drop table orgsetup_Product";
	public static final String ORDER_BY_JPQL = " ORDER BY product.azon ASC";
	public static final String ORDER_BY_SQL = " ORDER BY orgsetup_Product.azon ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.dinet.orgsetup62.model.Product"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.dinet.orgsetup62.model.Product"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.dinet.orgsetup62.model.Product"),
			true);
	public static long AZON_COLUMN_BITMASK = 1L;
	public static long LIFERAYORGID_COLUMN_BITMASK = 2L;
	public static long PAGEURLAZON_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.dinet.orgsetup62.model.Product"));

	public ProductModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _azon;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAzon(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _azon;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Product.class;
	}

	@Override
	public String getModelClassName() {
		return Product.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("azon", getAzon());
		attributes.put("name", getName());
		attributes.put("description", getDescription());
		attributes.put("services", getServices());
		attributes.put("image", getImage());
		attributes.put("datasheet", getDatasheet());
		attributes.put("distributor", getDistributor());
		attributes.put("category", getCategory());
		attributes.put("subcategory", getSubcategory());
		attributes.put("pageURL", getPageURL());
		attributes.put("pagetitle", getPagetitle());
		attributes.put("startingpage", getStartingpage());
		attributes.put("date", getDate());
		attributes.put("liferayOrgId", getLiferayOrgId());
		attributes.put("pageURLAzon", getPageURLAzon());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long azon = (Long)attributes.get("azon");

		if (azon != null) {
			setAzon(azon);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String services = (String)attributes.get("services");

		if (services != null) {
			setServices(services);
		}

		String image = (String)attributes.get("image");

		if (image != null) {
			setImage(image);
		}

		String datasheet = (String)attributes.get("datasheet");

		if (datasheet != null) {
			setDatasheet(datasheet);
		}

		String distributor = (String)attributes.get("distributor");

		if (distributor != null) {
			setDistributor(distributor);
		}

		String category = (String)attributes.get("category");

		if (category != null) {
			setCategory(category);
		}

		String subcategory = (String)attributes.get("subcategory");

		if (subcategory != null) {
			setSubcategory(subcategory);
		}

		String pageURL = (String)attributes.get("pageURL");

		if (pageURL != null) {
			setPageURL(pageURL);
		}

		String pagetitle = (String)attributes.get("pagetitle");

		if (pagetitle != null) {
			setPagetitle(pagetitle);
		}

		String startingpage = (String)attributes.get("startingpage");

		if (startingpage != null) {
			setStartingpage(startingpage);
		}

		Date date = (Date)attributes.get("date");

		if (date != null) {
			setDate(date);
		}

		Long liferayOrgId = (Long)attributes.get("liferayOrgId");

		if (liferayOrgId != null) {
			setLiferayOrgId(liferayOrgId);
		}

		String pageURLAzon = (String)attributes.get("pageURLAzon");

		if (pageURLAzon != null) {
			setPageURLAzon(pageURLAzon);
		}
	}

	@Override
	public long getAzon() {
		return _azon;
	}

	@Override
	public void setAzon(long azon) {
		_columnBitmask |= AZON_COLUMN_BITMASK;

		if (!_setOriginalAzon) {
			_setOriginalAzon = true;

			_originalAzon = _azon;
		}

		_azon = azon;
	}

	public long getOriginalAzon() {
		return _originalAzon;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public String getServices() {
		if (_services == null) {
			return StringPool.BLANK;
		}
		else {
			return _services;
		}
	}

	@Override
	public void setServices(String services) {
		_services = services;
	}

	@Override
	public String getImage() {
		if (_image == null) {
			return StringPool.BLANK;
		}
		else {
			return _image;
		}
	}

	@Override
	public void setImage(String image) {
		_image = image;
	}

	@Override
	public String getDatasheet() {
		if (_datasheet == null) {
			return StringPool.BLANK;
		}
		else {
			return _datasheet;
		}
	}

	@Override
	public void setDatasheet(String datasheet) {
		_datasheet = datasheet;
	}

	@Override
	public String getDistributor() {
		if (_distributor == null) {
			return StringPool.BLANK;
		}
		else {
			return _distributor;
		}
	}

	@Override
	public void setDistributor(String distributor) {
		_distributor = distributor;
	}

	@Override
	public String getCategory() {
		if (_category == null) {
			return StringPool.BLANK;
		}
		else {
			return _category;
		}
	}

	@Override
	public void setCategory(String category) {
		_category = category;
	}

	@Override
	public String getSubcategory() {
		if (_subcategory == null) {
			return StringPool.BLANK;
		}
		else {
			return _subcategory;
		}
	}

	@Override
	public void setSubcategory(String subcategory) {
		_subcategory = subcategory;
	}

	@Override
	public String getPageURL() {
		if (_pageURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _pageURL;
		}
	}

	@Override
	public void setPageURL(String pageURL) {
		_pageURL = pageURL;
	}

	@Override
	public String getPagetitle() {
		if (_pagetitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _pagetitle;
		}
	}

	@Override
	public void setPagetitle(String pagetitle) {
		_pagetitle = pagetitle;
	}

	@Override
	public String getStartingpage() {
		if (_startingpage == null) {
			return StringPool.BLANK;
		}
		else {
			return _startingpage;
		}
	}

	@Override
	public void setStartingpage(String startingpage) {
		_startingpage = startingpage;
	}

	@Override
	public Date getDate() {
		return _date;
	}

	@Override
	public void setDate(Date date) {
		_date = date;
	}

	@Override
	public long getLiferayOrgId() {
		return _liferayOrgId;
	}

	@Override
	public void setLiferayOrgId(long liferayOrgId) {
		_columnBitmask |= LIFERAYORGID_COLUMN_BITMASK;

		if (!_setOriginalLiferayOrgId) {
			_setOriginalLiferayOrgId = true;

			_originalLiferayOrgId = _liferayOrgId;
		}

		_liferayOrgId = liferayOrgId;
	}

	public long getOriginalLiferayOrgId() {
		return _originalLiferayOrgId;
	}

	@Override
	public String getPageURLAzon() {
		if (_pageURLAzon == null) {
			return StringPool.BLANK;
		}
		else {
			return _pageURLAzon;
		}
	}

	@Override
	public void setPageURLAzon(String pageURLAzon) {
		_columnBitmask |= PAGEURLAZON_COLUMN_BITMASK;

		if (_originalPageURLAzon == null) {
			_originalPageURLAzon = _pageURLAzon;
		}

		_pageURLAzon = pageURLAzon;
	}

	public String getOriginalPageURLAzon() {
		return GetterUtil.getString(_originalPageURLAzon);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Product.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Product toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Product)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProductImpl productImpl = new ProductImpl();

		productImpl.setAzon(getAzon());
		productImpl.setName(getName());
		productImpl.setDescription(getDescription());
		productImpl.setServices(getServices());
		productImpl.setImage(getImage());
		productImpl.setDatasheet(getDatasheet());
		productImpl.setDistributor(getDistributor());
		productImpl.setCategory(getCategory());
		productImpl.setSubcategory(getSubcategory());
		productImpl.setPageURL(getPageURL());
		productImpl.setPagetitle(getPagetitle());
		productImpl.setStartingpage(getStartingpage());
		productImpl.setDate(getDate());
		productImpl.setLiferayOrgId(getLiferayOrgId());
		productImpl.setPageURLAzon(getPageURLAzon());

		productImpl.resetOriginalValues();

		return productImpl;
	}

	@Override
	public int compareTo(Product product) {
		long primaryKey = product.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Product)) {
			return false;
		}

		Product product = (Product)obj;

		long primaryKey = product.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ProductModelImpl productModelImpl = this;

		productModelImpl._originalAzon = productModelImpl._azon;

		productModelImpl._setOriginalAzon = false;

		productModelImpl._originalLiferayOrgId = productModelImpl._liferayOrgId;

		productModelImpl._setOriginalLiferayOrgId = false;

		productModelImpl._originalPageURLAzon = productModelImpl._pageURLAzon;

		productModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Product> toCacheModel() {
		ProductCacheModel productCacheModel = new ProductCacheModel();

		productCacheModel.azon = getAzon();

		productCacheModel.name = getName();

		String name = productCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			productCacheModel.name = null;
		}

		productCacheModel.description = getDescription();

		String description = productCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			productCacheModel.description = null;
		}

		productCacheModel.services = getServices();

		String services = productCacheModel.services;

		if ((services != null) && (services.length() == 0)) {
			productCacheModel.services = null;
		}

		productCacheModel.image = getImage();

		String image = productCacheModel.image;

		if ((image != null) && (image.length() == 0)) {
			productCacheModel.image = null;
		}

		productCacheModel.datasheet = getDatasheet();

		String datasheet = productCacheModel.datasheet;

		if ((datasheet != null) && (datasheet.length() == 0)) {
			productCacheModel.datasheet = null;
		}

		productCacheModel.distributor = getDistributor();

		String distributor = productCacheModel.distributor;

		if ((distributor != null) && (distributor.length() == 0)) {
			productCacheModel.distributor = null;
		}

		productCacheModel.category = getCategory();

		String category = productCacheModel.category;

		if ((category != null) && (category.length() == 0)) {
			productCacheModel.category = null;
		}

		productCacheModel.subcategory = getSubcategory();

		String subcategory = productCacheModel.subcategory;

		if ((subcategory != null) && (subcategory.length() == 0)) {
			productCacheModel.subcategory = null;
		}

		productCacheModel.pageURL = getPageURL();

		String pageURL = productCacheModel.pageURL;

		if ((pageURL != null) && (pageURL.length() == 0)) {
			productCacheModel.pageURL = null;
		}

		productCacheModel.pagetitle = getPagetitle();

		String pagetitle = productCacheModel.pagetitle;

		if ((pagetitle != null) && (pagetitle.length() == 0)) {
			productCacheModel.pagetitle = null;
		}

		productCacheModel.startingpage = getStartingpage();

		String startingpage = productCacheModel.startingpage;

		if ((startingpage != null) && (startingpage.length() == 0)) {
			productCacheModel.startingpage = null;
		}

		Date date = getDate();

		if (date != null) {
			productCacheModel.date = date.getTime();
		}
		else {
			productCacheModel.date = Long.MIN_VALUE;
		}

		productCacheModel.liferayOrgId = getLiferayOrgId();

		productCacheModel.pageURLAzon = getPageURLAzon();

		String pageURLAzon = productCacheModel.pageURLAzon;

		if ((pageURLAzon != null) && (pageURLAzon.length() == 0)) {
			productCacheModel.pageURLAzon = null;
		}

		return productCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(31);

		sb.append("{azon=");
		sb.append(getAzon());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", services=");
		sb.append(getServices());
		sb.append(", image=");
		sb.append(getImage());
		sb.append(", datasheet=");
		sb.append(getDatasheet());
		sb.append(", distributor=");
		sb.append(getDistributor());
		sb.append(", category=");
		sb.append(getCategory());
		sb.append(", subcategory=");
		sb.append(getSubcategory());
		sb.append(", pageURL=");
		sb.append(getPageURL());
		sb.append(", pagetitle=");
		sb.append(getPagetitle());
		sb.append(", startingpage=");
		sb.append(getStartingpage());
		sb.append(", date=");
		sb.append(getDate());
		sb.append(", liferayOrgId=");
		sb.append(getLiferayOrgId());
		sb.append(", pageURLAzon=");
		sb.append(getPageURLAzon());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(49);

		sb.append("<model><model-name>");
		sb.append("dinet.orgsetup62.model.Product");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>azon</column-name><column-value><![CDATA[");
		sb.append(getAzon());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>services</column-name><column-value><![CDATA[");
		sb.append(getServices());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>image</column-name><column-value><![CDATA[");
		sb.append(getImage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>datasheet</column-name><column-value><![CDATA[");
		sb.append(getDatasheet());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>distributor</column-name><column-value><![CDATA[");
		sb.append(getDistributor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>category</column-name><column-value><![CDATA[");
		sb.append(getCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subcategory</column-name><column-value><![CDATA[");
		sb.append(getSubcategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pageURL</column-name><column-value><![CDATA[");
		sb.append(getPageURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pagetitle</column-name><column-value><![CDATA[");
		sb.append(getPagetitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startingpage</column-name><column-value><![CDATA[");
		sb.append(getStartingpage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>date</column-name><column-value><![CDATA[");
		sb.append(getDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>liferayOrgId</column-name><column-value><![CDATA[");
		sb.append(getLiferayOrgId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pageURLAzon</column-name><column-value><![CDATA[");
		sb.append(getPageURLAzon());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Product.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Product.class
		};
	private long _azon;
	private long _originalAzon;
	private boolean _setOriginalAzon;
	private String _name;
	private String _description;
	private String _services;
	private String _image;
	private String _datasheet;
	private String _distributor;
	private String _category;
	private String _subcategory;
	private String _pageURL;
	private String _pagetitle;
	private String _startingpage;
	private Date _date;
	private long _liferayOrgId;
	private long _originalLiferayOrgId;
	private boolean _setOriginalLiferayOrgId;
	private String _pageURLAzon;
	private String _originalPageURLAzon;
	private long _columnBitmask;
	private Product _escapedModel;
}